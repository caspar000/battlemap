{"ast":null,"code":"var _jsxFileName = \"/home/vanir/Desktop/git/battlemaximus/src/features/MapView/stage/MapStage.js\";\nimport React from 'react';\nimport Konva from 'konva';\nimport { Stage, Layer, Line, Rect, Circle, Image, Group, Text } from 'react-konva';\nimport { MapContext } from '../../../contexts/MapContext';\nimport useImage from 'use-image';\nimport Player from \"../icons/player.svg\";\nimport Goblin from \"../icons/goblin.svg\";\nimport Ogre from \"../icons/ogre.svg\";\nimport Orc from \"../icons/orc.svg\";\nimport Bandit from \"../icons/bandit.svg\";\nimport Skeleton from \"../icons/skeleton.svg\";\nimport Cultist from \"../icons/cultist.svg\";\nconst PlayerArray = ['Ali', 'Arnold', 'Morgan', 'Badri', 'Germand', 'Nydian'];\nvar lastLine;\n\nconst PlayerImage = ({\n  icon,\n  gridSize,\n  size\n}) => {\n  const [image] = useImage(icon);\n  return /*#__PURE__*/React.createElement(Image, {\n    image: image,\n    width: gridSize * size,\n    height: gridSize * size,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }\n  });\n};\n\nconst Entity = ({\n  num,\n  width,\n  height,\n  gridSize,\n  size,\n  color,\n  fontColor,\n  icon,\n  remove,\n  name\n}) => {\n  const handleDragStart = e => {\n    e.target.setAttrs({\n      scaleX: 1.2,\n      scaleY: 1.2\n    });\n  };\n\n  const handleDragEnd = e => {\n    e.target.to({\n      duration: 0.5,\n      easing: Konva.Easings.ElasticEaseOut,\n      scaleX: 1,\n      scaleY: 1\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Group, {\n    key: num,\n    draggable: true,\n    x: width / 3 + num * gridSize,\n    y: height / 3,\n    onDragStart: handleDragStart,\n    onDragMove: handleDragStart,\n    onDragEnd: handleDragEnd,\n    onDblClick: remove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Circle, {\n    x: gridSize * size / 2,\n    y: gridSize * size / 2,\n    radius: gridSize * size / 2 + 2,\n    fill: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayerImage, {\n    icon: icon,\n    gridSize: gridSize,\n    size: size,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: num + 1,\n    fontSize: gridSize,\n    fill: fontColor,\n    x: gridSize * size / 1.5,\n    y: gridSize * size / 1.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    text: name,\n    fontSize: gridSize / 2,\n    fill: fontColor,\n    x: gridSize * size / 1.5,\n    y: -gridSize * size / 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n};\n\nclass MapStage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleMouseDown = e => {\n      if (this.context.brush === 'brush' || this.context.brush === 'eraser') {\n        this._drawing = true;\n        const pos = this.stageRef.getPointerPosition();\n        const layer = this.drawLayerRef;\n\n        if (this.context.brush === 'brush') {\n          lastLine = new Konva.Line({\n            stroke: this.context.brushColor,\n            strokeWidth: 5,\n            globalCompositeOperation: 'source-over',\n            points: [pos.x, pos.y]\n          });\n          layer.add(lastLine);\n        }\n\n        if (this.context.brush === 'eraser') {\n          lastLine = new Konva.Line({\n            stroke: this.context.brushColor,\n            strokeWidth: 15,\n            globalCompositeOperation: 'destination-out',\n            points: [pos.x, pos.y]\n          });\n          layer.add(lastLine);\n        }\n      }\n    };\n\n    this.hanldeMouseUp = () => {\n      this._drawing = false;\n    };\n\n    this.handleMouseMove = () => {\n      if (!this._drawing) {\n        return;\n      }\n\n      const layer = this.drawLayerRef;\n      const pos = this.stageRef.getPointerPosition();\n      var newPoints = lastLine.points().concat([pos.x, pos.y]);\n      lastLine.points(newPoints);\n      layer.batchDraw();\n    };\n\n    this.handleDoubleClick = e => {\n      e.currentTarget.destroy();\n      this.entityLayerRef.draw();\n    };\n  }\n\n  render() {\n    const scale = 2;\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const {\n      gridSize,\n      gridColor,\n      player,\n      playerColor,\n      enemyColor,\n      goblin,\n      orc,\n      ogre,\n      bandit,\n      skeleton,\n      cultist\n    } = this.context;\n    const linegrid = [];\n\n    for (var i = 0; i < width * scale / gridSize; i++) {\n      linegrid.push( /*#__PURE__*/React.createElement(Line, {\n        key: i + 1,\n        points: [Math.round(i * gridSize) + 0.5, 0, Math.round(i * gridSize) + 0.5, height * scale],\n        stroke: '#333',\n        strokeWidth: 1,\n        listening: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    for (var j = 0; j < height * scale / gridSize; j++) {\n      linegrid.push( /*#__PURE__*/React.createElement(Line, {\n        key: -j - 1,\n        points: [0, Math.round(j * gridSize), width * scale, Math.round(j * gridSize)],\n        stroke: '#333',\n        strokeWidth: 1,\n        listening: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Stage, {\n      width: width,\n      height: height - 40,\n      onMouseDown: this.handleMouseDown,\n      onTouchStart: this.handleMouseDown,\n      onMouseMove: this.handleMouseMove,\n      onTouchMove: this.handleMouseMove,\n      onMouseUp: this.hanldeMouseUp,\n      onTouchEnd: this.hanldeMouseUp,\n      onDblClick: this.spawnEntity,\n      ref: node => {\n        this.stageRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Layer, {\n      listening: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Rect, {\n      x: 0,\n      y: 0,\n      width: width * scale,\n      height: height * scale,\n      fill: gridColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }), linegrid), /*#__PURE__*/React.createElement(Layer, {\n      ref: node => {\n        this.entityLayerRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, [...Array(player)].map((_, i) => /*#__PURE__*/React.createElement(Entity, {\n      key: i,\n      num: i,\n      name: PlayerArray[i],\n      width: width,\n      height: height,\n      gridSize: gridSize,\n      size: 1,\n      color: playerColor,\n      fontColor: '#fff',\n      remove: this.handleDoubleClick,\n      icon: Player,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    })), [...Array(goblin)].map((_, i) => /*#__PURE__*/React.createElement(Entity, {\n      key: i,\n      num: i,\n      width: width,\n      height: height,\n      gridSize: gridSize,\n      size: 1,\n      color: enemyColor,\n      fontColor: '#000',\n      remove: this.handleDoubleClick,\n      icon: Goblin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    })), [...Array(orc)].map((_, i) => /*#__PURE__*/React.createElement(Entity, {\n      key: i,\n      num: i,\n      width: width,\n      height: height,\n      gridSize: gridSize,\n      size: 1,\n      color: enemyColor,\n      fontColor: '#000',\n      remove: this.handleDoubleClick,\n      icon: Orc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    })), [...Array(ogre)].map((_, i) => /*#__PURE__*/React.createElement(Entity, {\n      key: i,\n      num: i,\n      width: width,\n      height: height,\n      gridSize: gridSize,\n      size: 2,\n      color: enemyColor,\n      fontColor: '#000',\n      remove: this.handleDoubleClick,\n      icon: Ogre,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    })), [...Array(bandit)].map((_, i) => /*#__PURE__*/React.createElement(Entity, {\n      key: i,\n      num: i,\n      width: width,\n      height: height,\n      gridSize: gridSize,\n      size: 1,\n      color: enemyColor,\n      fontColor: '#000',\n      remove: this.handleDoubleClick,\n      icon: Bandit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    })), [...Array(skeleton)].map((_, i) => /*#__PURE__*/React.createElement(Entity, {\n      key: i,\n      num: i,\n      width: width,\n      height: height,\n      gridSize: gridSize,\n      size: 1,\n      color: enemyColor,\n      fontColor: '#000',\n      remove: this.handleDoubleClick,\n      icon: Skeleton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }\n    })), [...Array(cultist)].map((_, i) => /*#__PURE__*/React.createElement(Entity, {\n      key: i,\n      num: i,\n      width: width,\n      height: height,\n      gridSize: gridSize,\n      size: 1,\n      color: enemyColor,\n      fontColor: '#000',\n      remove: this.handleDoubleClick,\n      icon: Cultist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(Layer, {\n      ref: node => {\n        this.drawLayerRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n/* Gaan was here. He didn't understand anything.*/\n\n\nMapStage.contextType = MapContext;\nexport default MapStage;","map":{"version":3,"sources":["/home/vanir/Desktop/git/battlemaximus/src/features/MapView/stage/MapStage.js"],"names":["React","Konva","Stage","Layer","Line","Rect","Circle","Image","Group","Text","MapContext","useImage","PlayerArray","lastLine","PlayerImage","icon","gridSize","size","image","Entity","num","width","height","color","fontColor","remove","name","handleDragStart","e","target","setAttrs","scaleX","scaleY","handleDragEnd","to","duration","easing","Easings","ElasticEaseOut","MapStage","Component","handleMouseDown","context","brush","_drawing","pos","stageRef","getPointerPosition","layer","drawLayerRef","stroke","brushColor","strokeWidth","globalCompositeOperation","points","x","y","add","hanldeMouseUp","handleMouseMove","newPoints","concat","batchDraw","handleDoubleClick","currentTarget","destroy","entityLayerRef","draw","render","scale","window","innerWidth","innerHeight","gridColor","player","playerColor","enemyColor","goblin","orc","ogre","bandit","skeleton","cultist","linegrid","i","push","Math","round","j","spawnEntity","node","Array","map","_","Player","Goblin","Orc","Ogre","Bandit","Skeleton","Cultist","contextType"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Konva from 'konva'\r\nimport {Stage, Layer, Line, Rect, Circle, Image, Group, Text} from 'react-konva'\r\nimport {MapContext} from '../../../contexts/MapContext';\r\nimport useImage from 'use-image'\r\n\r\nimport Player from '../icons/player.svg'\r\nimport Goblin from '../icons/goblin.svg'\r\nimport Ogre from '../icons/ogre.svg'\r\nimport Orc from '../icons/orc.svg'\r\nimport Bandit from '../icons/bandit.svg'\r\nimport Skeleton from '../icons/skeleton.svg'\r\nimport Cultist from '../icons/cultist.svg'\r\n\r\n\r\nconst PlayerArray = ['Ali', 'Arnold', 'Morgan', 'Badri', 'Germand', 'Nydian'];\r\n\r\nvar lastLine;\r\n\r\nconst PlayerImage = ({icon, gridSize, size}) => {\r\n  const [image] = useImage(icon);\r\n  return <Image image={image} width={gridSize * size} height={gridSize * size} />;\r\n};\r\n\r\nconst Entity = ({num, width, height, gridSize, size, color, fontColor, icon, remove, name}) => {\r\n  const handleDragStart = e => {\r\n    e.target.setAttrs({\r\n      scaleX: 1.2,\r\n      scaleY: 1.2,\r\n    })\r\n  }\r\n  const handleDragEnd = e => {\r\n    e.target.to({\r\n      duration: 0.5,\r\n      easing: Konva.Easings.ElasticEaseOut,\r\n      scaleX: 1,\r\n      scaleY: 1,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Group\r\n        key={num}\r\n        draggable\r\n        x={width / 3 + num*gridSize}\r\n        y={height / 3}\r\n        onDragStart={handleDragStart}\r\n        onDragMove={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n        onDblClick={remove}\r\n    >\r\n      <Circle\r\n        x={gridSize * size / 2}\r\n        y={gridSize * size / 2}\r\n        radius={gridSize * size / 2 + 2}\r\n        fill={color}\r\n      />\r\n      <PlayerImage icon={icon} gridSize={gridSize} size={size} />\r\n      <Text text={num + 1} fontSize={gridSize} fill={fontColor} x={gridSize * size / 1.5} y={gridSize * size / 1.5} />\r\n      <Text text={name} fontSize={gridSize / 2} fill={fontColor} x={gridSize * size / 1.5} y={- gridSize * size / 4} />\r\n    </Group>\r\n  )\r\n}\r\n\r\nclass MapStage extends React.Component {\r\n  static contextType = MapContext;\r\n\r\n  handleMouseDown = (e) => {\r\n    if (this.context.brush === 'brush' || this.context.brush === 'eraser'){\r\n      this._drawing = true;\r\n      const pos = this.stageRef.getPointerPosition();\r\n      const layer = this.drawLayerRef;\r\n      if (this.context.brush === 'brush'){\r\n        lastLine = new Konva.Line({\r\n          stroke: this.context.brushColor,\r\n          strokeWidth: 5,\r\n          globalCompositeOperation: 'source-over',\r\n          points: [pos.x, pos.y],\r\n        });\r\n        layer.add(lastLine);\r\n      }\r\n      if (this.context.brush === 'eraser'){\r\n        lastLine = new Konva.Line({\r\n          stroke: this.context.brushColor,\r\n          strokeWidth: 15,\r\n          globalCompositeOperation: 'destination-out',\r\n          points: [pos.x, pos.y],\r\n        });\r\n        layer.add(lastLine);\r\n      }\r\n    }\r\n  }\r\n\r\n  hanldeMouseUp = () => {\r\n    this._drawing = false;\r\n  }\r\n\r\n  handleMouseMove = () => {\r\n    if (!this._drawing) {\r\n      return;\r\n    }\r\n    const layer = this.drawLayerRef;\r\n    const pos = this.stageRef.getPointerPosition();\r\n    var newPoints = lastLine.points().concat([pos.x, pos.y]);\r\n    lastLine.points(newPoints);\r\n    layer.batchDraw();\r\n  }\r\n\r\n  handleDoubleClick = e => {\r\n    e.currentTarget.destroy()\r\n    this.entityLayerRef.draw()\r\n  }\r\n\r\n  render() {\r\n    const scale = 2;\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    const {gridSize, gridColor, player, playerColor, enemyColor, goblin, orc, ogre, bandit, skeleton, cultist} = this.context\r\n    \r\n    const linegrid = [];\r\n\r\n    for (var i = 0; i < width*scale / gridSize; i++) {\r\n      linegrid.push(\r\n        <Line \r\n          key={i+1}\r\n          points={[Math.round(i * gridSize) + 0.5, 0, Math.round(i * gridSize) + 0.5, height*scale]}\r\n          stroke={'#333'}\r\n          strokeWidth={1}\r\n          listening={false}\r\n        />\r\n      )\r\n    }\r\n    for (var j = 0; j < height*scale / gridSize; j++) {\r\n      linegrid.push(\r\n        <Line\r\n          key={-j-1}\r\n          points={[0, Math.round(j * gridSize), width*scale, Math.round(j * gridSize)]}\r\n          stroke={'#333'}\r\n          strokeWidth={1}\r\n          listening={false}\r\n        />\r\n      )\r\n    }\r\n\r\n\r\n    return (\r\n      <Stage \r\n        width={width} \r\n        height={height - 40}\r\n        onMouseDown={this.handleMouseDown}\r\n        onTouchStart={this.handleMouseDown}\r\n        onMouseMove={this.handleMouseMove}\r\n        onTouchMove={this.handleMouseMove}\r\n        onMouseUp={this.hanldeMouseUp}\r\n        onTouchEnd={this.hanldeMouseUp}\r\n        onDblClick={this.spawnEntity}\r\n        ref={node => {\r\n          this.stageRef = node;\r\n        }}\r\n      >\r\n        <Layer\r\n          listening={false}\r\n        >\r\n          <Rect\r\n            x={0}\r\n            y={0}\r\n            width={width * scale}\r\n            height={height * scale}\r\n            fill={gridColor}\r\n           />\r\n          {linegrid}\r\n        </Layer>\r\n        <Layer\r\n          ref={node => {\r\n            this.entityLayerRef = node;\r\n          }}>\r\n          {[...Array(player)].map((_, i) => (\r\n            <Entity \r\n              key={i}\r\n              num={i} \r\n              name={PlayerArray[i]}\r\n              width={width} \r\n              height={height} \r\n              gridSize={gridSize} \r\n              size={1}\r\n              color={playerColor} \r\n              fontColor={'#fff'}\r\n              remove={this.handleDoubleClick}\r\n              icon={Player} />\r\n          ))}\r\n          {[...Array(goblin)].map((_, i) => (\r\n            <Entity \r\n              key={i}\r\n              num={i} \r\n              width={width} \r\n              height={height} \r\n              gridSize={gridSize} \r\n              size={1}\r\n              color={enemyColor} \r\n              fontColor={'#000'}\r\n              remove={this.handleDoubleClick}\r\n              icon={Goblin} />\r\n          ))}\r\n          {[...Array(orc)].map((_, i) => (\r\n            <Entity \r\n              key={i}\r\n              num={i} \r\n              width={width} \r\n              height={height} \r\n              gridSize={gridSize} \r\n              size={1}\r\n              color={enemyColor} \r\n              fontColor={'#000'}\r\n              remove={this.handleDoubleClick}\r\n              icon={Orc} />\r\n          ))}\r\n          {[...Array(ogre)].map((_, i) => (\r\n            <Entity \r\n              key={i}\r\n              num={i} \r\n              width={width} \r\n              height={height} \r\n              gridSize={gridSize} \r\n              size={2}\r\n              color={enemyColor} \r\n              fontColor={'#000'}\r\n              remove={this.handleDoubleClick}\r\n              icon={Ogre} />\r\n          ))}\r\n          {[...Array(bandit)].map((_, i) => (\r\n            <Entity \r\n              key={i}\r\n              num={i} \r\n              width={width} \r\n              height={height} \r\n              gridSize={gridSize} \r\n              size={1}\r\n              color={enemyColor} \r\n              fontColor={'#000'}\r\n              remove={this.handleDoubleClick}\r\n              icon={Bandit} />\r\n          ))}\r\n          {[...Array(skeleton)].map((_, i) => (\r\n            <Entity \r\n              key={i}\r\n              num={i} \r\n              width={width} \r\n              height={height} \r\n              gridSize={gridSize} \r\n              size={1}\r\n              color={enemyColor} \r\n              fontColor={'#000'}\r\n              remove={this.handleDoubleClick}\r\n              icon={Skeleton} />\r\n          ))}\r\n          {[...Array(cultist)].map((_, i) => (\r\n            <Entity \r\n              key={i}\r\n              num={i} \r\n              width={width} \r\n              height={height} \r\n              gridSize={gridSize} \r\n              size={1}\r\n              color={enemyColor} \r\n              fontColor={'#000'}\r\n              remove={this.handleDoubleClick}\r\n              icon={Cultist} />\r\n          ))}\r\n        </Layer>\r\n        <Layer\r\n          ref={node => {\r\n            this.drawLayerRef = node;\r\n          }}>\r\n        </Layer>\r\n\r\n      </Stage>\r\n    )\r\n  }\r\n}\r\n\r\n/* Gaan was here. He didn't understand anything.*/\r\n\r\nexport default MapStage\r\n"]},"metadata":{},"sourceType":"module"}